# 第 9 章 位，标志，分支和表 轻松进入主流汇编编码

在 X86 指令集中，有一族指令能够让我们通过应用按位布尔逻辑运算来操作字节中的位。比如：AND, OR, XOR和 NOT。对单个字节或字进行移位的操作，以下就是经常用到的移位/循环移位指令：ROL，ROR，RCL，RCR，SHL和SHR。



### 9.1.1 位编号

最不重要的位也叫最低有效位，最重要的位也叫最高有效位。图 9-1 以 16 位字为例进行了展示。位编号的工作方式始终一样，不管处理的位有多少个：字节，字，双字或更长字。第 0 位通常在最右端，然后依次往左，位编号递增。

![截屏2021-06-19 上午11.00.41](https://raw.githubusercontent.com/wangjunstf/pics/main/uPic/%E6%88%AA%E5%B1%8F2021-06-19%20%E4%B8%8A%E5%8D%8811.00.41.png)



当你数这些二进制位的时候，从最右边的那个位开始，并且从零开始编号。



### 9.1.2 逻辑操作

逻辑与操作符的工作原理如下：条件 1 与 条件 2，当且仅当二者同时为真时结果为真；如果二者之一为假，结果为假。

![截屏2021-06-19 上午11.06.38](https://raw.githubusercontent.com/wangjunstf/pics/main/uPic/%E6%88%AA%E5%B1%8F2021-06-19%20%E4%B8%8A%E5%8D%8811.06.38.png)

在汇编术语中，与指令处理两个二进制位(bit)，根据这两个位的计算结果产生第 3 位，根据习惯，我们认为二进制位 1 的值为真，二进制位 0 的值为假。

<img src="https://raw.githubusercontent.com/wangjunstf/pics/main/uPic/%E6%88%AA%E5%B1%8F2021-06-19%20%E4%B8%8A%E5%8D%8811.08.59.png" alt="截屏2021-06-19 上午11.08.59" style="zoom:80%;" />



### 9.1.3 与指令

x86 指令集中的 AND指令体现了这个概念。AND 指令对两个位数相同的操作数执行与逻辑运算，并且一般情况下，用计算结果替换目标操作数。(注意，目标操作数通常情况下是指最接近助记符的那个操作数。)例如：

```asm
and al,bl
```

AL 中的第 0 位与 BL 中的第 0 位相与，AL 中的第 1 位 与 BL 中的 第 1 位相与，依次类推。每个与操作产生一个结果位，当所有这 8 个与操作完成后，这些结果位被放到目标操作数里(这里为 AL)。这是机器指令中惯用的一种思路：对两个操作数执行某种操作，用产生的结果替换第一个操作数(目标操作数)，而不是第二个操作数。



### 9.1.4 位屏蔽

与指令的一个主要应用是把一个二进制位或者更多的二进制位从字节数据或者是字数据中分离出来。这里所说的分离，只不过是把所有不需要的二进制位都置为一个可靠的值: 0。

例如，我们想测试某个数值的第 4 位和第 5 位。可以用下图所示方式解决：

<img src="https://raw.githubusercontent.com/wangjunstf/pics/main/uPic/%E6%88%AA%E5%B1%8F2021-06-19%20%E4%B8%8A%E5%8D%8811.23.36.png" alt="截屏2021-06-19 上午11.23.36" style="zoom:50%;" />

这样，我们就可以获得 AL 的第 4 位和第 5 位分别为 1 和 0。



### 9.1.5 或指令

两个操作数，有一个操作数为真，结果就为真。两个操作数都为 假，结果才为假。

<img src="https://raw.githubusercontent.com/wangjunstf/pics/main/uPic/%E6%88%AA%E5%B1%8F2021-06-19%20%E4%B8%8A%E5%8D%8811.29.31.png" alt="截屏2021-06-19 上午11.29.31" style="zoom:50%;" />

由于或操作不适合做位屏蔽，因此比与运算用的少得多。



### 9.1.6 异或指令

这个逻辑操作是排他性的或，意思是：只有当这两个操作数的值不同(即 1 和 0 或者 0 和 1)时，结果才为 1.

![截屏2021-06-19 上午11.38.36](https://raw.githubusercontent.com/wangjunstf/pics/main/uPic/%E6%88%AA%E5%B1%8F2021-06-19%20%E4%B8%8A%E5%8D%8811.38.36.png)

异或的一个不太明显的应用是：任何值与本身相异或，将产生结果 0.换句话说，如果把寄存器作为操作数，对其进行异或操作的话，这个寄存器将会被清零。

```asm
xor eax,eax    ;  清零 eax 寄存器
```

在过去，这种方式比通过使用 MOV 来加载立即数 0 到寄存器要快一些，尽管现在已经不再这样，但是它仍然是一个有必要知道的有趣的技巧。

<img src="https://raw.githubusercontent.com/wangjunstf/pics/main/uPic/%E6%88%AA%E5%B1%8F2021-06-19%20%E4%B8%8A%E5%8D%8811.39.12.png" alt="截屏2021-06-19 上午11.39.12" style="zoom:50%;" />



### 9.1.7 非指令

在所有逻辑指令中，最容易理解的就是非指令。非操作的真值表也比我们前面看到的要简单，因为非操作仅仅对一个操作数进行运算。该运算做的事情也非常简单: 非操作取出它的单操作数的每一位的状态，然后将其变化相反的状态。1 变成 0，0  变成 1。

| 位   | 操作符 | 结果位 |
| ---- | ------ | ------ |
| 0    | NOT    | 1      |
| 1    | NOT    | 0      |



### 9.1.8 段寄存器对逻辑操作没有反应

你不能直接访问 X86 的段寄存器，除非已经达到了可以对操作系统编程的水平。段寄存器属于操作系统，用户空间程序不能以任何方式修改它们。

但是，即使你已经开始在操作系统级别上编程了，段寄存器仍然具有很大的局限性。其中之一就是**不能进行按位逻辑运算**。如果企图这样做的话，汇编编译器会抛给你“非法使用段寄存器”的错误提示。如果需要对段寄存执行逻辑操作的话，你必须首先将该段寄存器的值拷贝到以下寄存器之一：EAX，EBX，ECX，EDX，EBP，ESI或者EDI；对通用寄存器执行逻辑运算然后再将通用寄存器中的计算结果拷回到段寄存器中。

通用寄存器被称为“通用的”是有原因的，段寄存器在任何方面都不是通用的。它们的内存地址是专有的，如果你必须修改段寄存器的值，一般的方法是将其挪到通用寄存器中去完成，然后再将修改后的值拷回所处理的段寄存器中。



## 9.2 移位操作

另一种操纵字节中的位的方式要更直接一些：将这些位往某个方向(左或右)移动。最简单的移位指令相当显而易见: SHL 将它的操作数左移，而 SHR 将它的操作数右移。

所有的移位指令都有相同的一般形式, 如 SHL 指令形式:

```
shl <寄存器/内存>,<count>
```

第一个操作数是移位操作的目标——也就是那个即将进行移位操作的数值。它可以是寄存器数据或内存数据，但是能是立即数。第二个操作数则指出了即将移动的位数。



### 9.2.1 根据什么进行移位操作

表示移动位数的 \<count\> 操作数有着独特的历史，在老式的 8086 和 8088 中，它可能是以下二者之一：立即数1 或者寄存器 CL。

而到了 x86，它的通用寄存器成为真正的“通用”之前，计数的工作成了 CX 寄存器的隐形议程。它通过循环，线性元素以及其他结构对移动的位数进行计数。尽管能够移动的最大位数可达 32 位，但是真正有意义的移动位数最多到 32 。

从 286 以及所有更新的 X86 CPU 开始，\<count\>操作数可以是从 1 到 255 之间的任意立即数。因为 Linux 需要至少运行在 386 上，所以当你在 Linux 下进行编程的时候，对于移位计数值的那些古老的限制已经不复存在了。



### 9.2.2 移位指令的工作原理

要想理解移位指令，需要把即将进行移位操作的数转换为二进制数，而不是十六进制或者十进制数。例如：

AX寄存器的内容为: 0B76FH，它对应的 二进制数为：1011011101101111

如果此时执行 SHL AX,1

AX 将会变成 0110111011011110，这个数的右边被插入了一个 0，整个数据都往左边移动了一位。注意，最左侧的二进制位已经被从这个数中移除到“空白宇宙”之中。



### 9.2.3 将位移入进位标志

从这个二进制数的左侧移出来的最后一位，被存放到名为进位标志的位临时存储段里，它一般缩写为“CF”。进位标志是在那聚集在一起形成EFlag 寄存器的信息位之一。

当使用移位指令时，请记住，许多不同的移位指令都使用进位标志(carry flag) ——不仅仅是移位指令。**如果想把一个二进制位移入进位标志，目的是想测试一下这个位，然后看一下它的值到底是什么，一定要在执行其他能够影响进位标志的指令之前进行，这些指令包括算术指令，所有的按位逻辑操作指令以及其他一些不同种类的指令，当然，还有所有的其他的移位指令。**

如果将移位移入进位标志，然后立即执行其他的移位指令，那么， 第一个移入的位将被从这个数中移除，彻底消失。



### 9.2.4 循环移位指令

如果希望一个二进制位的命运不是即将被丢弃到“空白宇宙”，需要使用循环移位指令：RCL，RCR，ROL，ROR。循环移位指令几乎和移位指令相同，但是有一个重要区别：**从操作数的一端移出的二进制位，将会重新出现在操作数的另一端。当你对一个操作数执行不止一位的循环移位操作时，这些位不断地在某一方向上进行匹配，从某一端被移除，然后立刻出现到另外一端。**当循环指令被执行时，这些位就这样在操作数中循环。

例如，下图展示了 ROL(循环左移)指令：

<img src="https://raw.githubusercontent.com/wangjunstf/pics/main/uPic/%E6%88%AA%E5%B1%8F2021-06-19%20%E4%B8%8B%E5%8D%889.18.07.png" alt="截屏2021-06-19 下午9.18.07" style="zoom: 67%;" />



ROR(循环右移)指令工作原理相同，只不过位的移动方向是从左往右。

操作数即将循环移动的位数可以是立即数，也可以是 CL 寄存器中的值。在 X86 指令集中，还有一对循环指令: RCR(带进位的循环右移指令)和RCL(带进位的循环左移指令)。这些操作跟 ROL 和 ROR 类似，但是有一点不同：从操作数的某一端移出的二进制位，会通过进位标志来重新进入该操作数。任意一个位通过 CF 进行循环的路径，都比通过 ROL 和 ROR 进行循环的路径长一位。如图 9-5：

如果对一个值循环移动超过 31 次，你将得到一个和开始循环的那个数一样的值。如果把一个数循环移动 32 位，就会得到一个和开始循环那个数一样的值。因此在保护模式下(以及在老式的 286 下)编程时，在指令执行之前，移位的数量被删减到 5 位。归根结底，5 位二进制数所能表示的最大值是32。

<img src="https://raw.githubusercontent.com/wangjunstf/pics/main/uPic/%E6%88%AA%E5%B1%8F2021-06-19%20%E4%B8%8B%E5%8D%889.31.30.png" alt="截屏2021-06-19 下午9.31.30" style="zoom: 50%;" />



### 9.2.5 将已知值存入进位标志 CF

有两条操作标志寄存器的指令: CLC, STC

CLC：将标志位清零，STC：将标志位设置为1

使用 RCL 或 RCR 指令，可以将 CF 设置为特定值。



## 9.3 位操作

Linux 能够相当方便地在显示器上显示文本，但是想把某个寄存器中的值以十六进制的方式进行显示，Linux 就无能为力了。必须先把这个数转换为字符串的形式，然后再通过 INT 80H 调用 sys_write 内核服务来显示这个字符串。

下面的代码，颇像一个 Bless 十六进制编辑器的只读版本。当你从任意类型的文件中重定向它的输入时，它都会从该文件中一次性读入 16 个字节，并将其显示在一行里，形成由空格隔开的 16 进制值。

```asm
; 可执行文件名：hexdump1
; 版本：1.0
; 创建日期：2021年6月19日
; 作者：王俊
;    描述：Linux 下的一个简单的汇编程序，采用 NASM 2.13.02
;    演示了如何把二进制值转换为 16 进制字符串表示
;    本程序可作为供文件使用的一个非常简单的 16 进制转换工具
;    尽管没有 ASCII 等值列
; 通过以下方式执行本程序:
; hexdump1 < (input file)
;
; 通过以下命令生成本程序
; nasm -f elf -g -F DWARF hexdump1.asm -o hexdump1.o
; ld -m elf_i386 -o hexdump1 hexdump1.o
; 

SECTION .bss                    ; 包含未初始化数据的段
    BUFFLEN equ 16              ; 我们一次从这个文件读取 16 个字节
    Buff: resb BUFFLEN          ; 文本缓冲区本身

SECTION .data                   ; 包含已初始化数据段
    HexStr: db " 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00",10  ; 保存 16 进制 字符串
    HEXLEN equ $-HexStr                                               ; 上述字符串长度

    Digits: db "0123456789ABCDEF"                                     ; 保存 16 进制中的 16 个字符


SECTION .text                   ; 包含代码段
 
global _start                   ; 连接器需要这个来找到入口点

_start:
    nop                         ; 这个无操作指令使得 GDB 感到非常高兴

; 从标准输入中读取满满一缓冲区的文本:
Read:
    mov eax,3                   ; 指定 sys_read 调用
    mov ebx,0                   ; 指定文件描述符 0：标准输入
    mov ecx,Buff                ; 传递将要从中读入数据的缓冲区的偏移地址
    mov edx,BUFFLEN             ; 传递一次需要读取的字节数
    int 80H                     ; 调用 sys_read 来填充缓冲区
    mov ebp,eax                 ; 存储从文件中读入的字节数以备后用
    cmp eax,0                   ; 如果 eax=0, 则 sys_read 已经到达标准输入结尾
    je Done                     ; 通过与零比较，相等则跳转


; 设置寄存器用于处理缓冲区步骤：
    mov esi,Buff                ; 将文件缓冲区的地址存入 esi
    mov edi,HexStr              ; 将线性字符串的地址存入 edi
    xor ecx,ecx                 ; 将线性字符串指针清零

; 通读检查缓冲区，将二进制数值转换为 16 进制位元(hex digits)
Scan:
    xor eax,eax                 ; 将寄存器 eax 清零

;  这里我们可以计算选对于 HexStr 的偏移地址，它等于 ecx 中的值乘以3
    mov edx,ecx                 ; 将字符计数器的值复制到 edx 中
    shl edx,1                   ; 通过左移位操作将指针的值乘以 2
    add edx,ecx


; 从缓冲区中获取一个字符，并将其同事存入 eax 和 ebx 中:
    mov al,byte [esi+ecx]           ; 从输入缓冲区中取出一个字节，送入al
    mov ebx,eax                     ; 为了求得第 2 个“半字节”，将该字节复制到bl中

; 查找低半字节字符并将其插入字符串
    and al,0FH                      ; 屏蔽除了低半字节之外的所有内容
    mov al,byte [Digits+eax]        ; 查找与该半字节相等的字符
    mov byte [HexStr+edx+2],al         ; 将最低有效位的字符位元写入线性字符串
    
; 查找高半字节字符并将其插入字符串:
    shr bl,4                        ; 将字符的最高位移入低四位
    mov bl, byte [Digits+ebx]       ; 查找与该半字节相等的字符
    mov byte [HexStr+edx+1],bl      ; 将最高有效位的字符位元写入线性字符串

; 将缓冲区指针指向下一个字符，看一下任务是否完成:

    inc ecx                         ; 增加线性字符串指针的值
    cmp ecx,ebp                         ; 与缓冲区的字符数进行比较
    jnae Scan                        ; 如果 ecx <= 缓冲区的字符数 ，转回去继续循环

; 将这行十六进制写入标准输入:

    mov eax,4                       ; 指定 sys_write 调用
    mov ebx,1                       ; 指定文件描述符1：标准输出
    mov ecx,HexStr                  ; 传递线性字符串的偏移地址
    mov edx,HEXLEN                  ; 传递线性字符串的长度(字节)
    int 80H                         ; 通过内核调用来显示字符串
    jmp Read                        ; 继续循环，再次加载文件缓冲区


; 胜利完成任务！
Done:
    mov eax,1                       ; 该行代码用于退出系统调用(syscall)
    mov ebx,0                       ; 将返回值设为 0 
    int 80H                         ; 进行内核调用
```



### 9.3.1 将一个字分解为 “半个字“

记住，Linux 以二进制的形式将值从文件中读入内容。十六进制是一种显示二进制的方式。显示一个8 位二进制数需要两个十六进制数，字节的低四位用一个十六进制数来表示，高四位用另一个十六进制数来表示。例如，二进制数 11100110 与十六进制数 E6 相等。把一个 8 位二进制数转换成两个 4 位二进制数时，必须每次转换 1 个，者意味着不得不把一个单字节拆分成 2 个 4 位大小的二进制量，我们通常将其称作半字节(nybble)。

我们将一个字节放入两个寄存器 EAX, EBX 中，因为把一个字节的高位和低位分开具有一定的破坏性，因为从本质上讲， 我们把不需要的那个半字节清零了。

要想从字节中分离出低 4 位，我们需要屏蔽掉不想要的那个半字节，可以通过与指令完成：

```asm
and al,0Fh
```



### 9.3.2 将高半字节移入低半字节

屏蔽掉 AL 中的高半字节将会破坏掉它的值，所以需要提前将其拷贝到 EBX 中，我们可以把 BL 中的高半字节变成低半字节，可以通过移位指令实现：

```asm
shr bl,4
```



### 9.3.3 使用查找表

在程序对的 .data 段中，定义了一个非常简单的查找表。Digits 表的定义如下：

Digits: db "0123456789ABCDEF"

每一个十六进制位元(digit)都在这个字符中占用一个位置，而该位元相对于字符串起始位置的偏移地址就是它所代表的值。换句话说，ASCII 字符 "0"，位于这个字符串的开始位置，它相对于这个字符串的起始位置的偏移地址是 0 个字节。我们可以通过一个内存引用来从 Digits 表中 “查找” 一个字符:

```
mov al,byte [Digits + eax]
```

 把 AL 中存放的偏移地址和 Gigits  查找表的地址 (通过 EAX)相加刚好能够把与 AL 中的值相等的 ASCII 值字符带给我们。如下图所示：

<img src="https://raw.githubusercontent.com/wangjunstf/pics/main/uPic/%E6%88%AA%E5%B1%8F2021-06-20%20%E4%B8%8A%E5%8D%8811.29.15.png" alt="截屏2021-06-20 上午11.29.15" style="zoom:50%;" />



关于从查找表 Digits 中取出一个位元并将其放入 AL 中的 MOV 指令，可能有两件令人费解的事情：

* 在内存引用中，我们必须使用 EAX 而不是 AL，因为 AL 不能参与有效地址计算。不要忘记，AL 位于 EAX “内部”。
* 我们把 AL 中的半字节用与之相等的字符进行替换。该指令首先从查找表中取出与这个半字节相等的字符，然后再将这个相等的字符存回 AL。而之前 AL 中的那个半字节则不复存在了。



### 9.3.4 通过移位和相加来实现相乘

HexStr: db " 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00",10

当 hexdump1 每次从输入文件中读入一个 16 字节的数据块时，它都将其转换成十六进制位元的 ASCII 字符格式，并插入 HexStr 中。从某种意义上讲，这是另外一种类型的表操作，只不过我们讲查找表操作替换为根据索引将一些值写入表中而已。

另外一种方式是将 HexStr 看成一个具有 16 个表项的表，每一个表项长度为 3 个字符，如图 9-7。在每一个表项中，第一个字符是空格，第二个和第三个字符是该 16 进制数本身。在 .data 段中，作为HexStr 的一部分，空格字符已经存在了。初始的"空" HexStr 字符串在所有的 16 进制位元的位置都有一个 0 字符，为了给 HexStr 填充真实的数据，以便显示每一行，我们必须通过汇编循环来扫描 HexStr，将低半字节字符和高半字节字符区分开来。

<img src="https://raw.githubusercontent.com/wangjunstf/pics/main/uPic/%E6%88%AA%E5%B1%8F2021-06-20%20%E4%B8%8B%E5%8D%888.19.04.png" alt="截屏2021-06-20 下午8.19.04" style="zoom:67%;" />



每一次循环，都要 HexStr 索引乘于3，前面讲解了 MUL 指令，可以 X86 指令集中任意的无符号乘法。该指令同样具有一些局限性，尤其是它需要特定的寄存器来完成隐式操作的工作方式。

所幸的是，在汇编语言中，有一些其他的，速度更快的方法可实现乘法操作。使用 SHL(左移位)指令，可以实现一个数与 2 的幂次方相乘。例如，左移 1 位，相当于乘以 2，左移 2 为，相当于乘以 4。

如果要实现一个数与 3 相乘，那该怎么办呢？非常容易：先将这个数与2 相乘，然后再把得到的结果与被乘数的一份复制相加即可。例如：

```asm
mov edx,ecx      ; 将字符计数器复制到 edx 
shl edx,1        ; 通过左移位将指针与 2 相乘
add edx,ecx      ; 完成乘以 3 的操作
```



一旦理解了字符串表 HexStr 如何创建，就可以直截了当地把十六进制位元写入它。最低有效十六进制位元在 AL 中，最高有效十六进制位元在 BL 中。通过一个由 3 部分组成的内存地址来实现将这两个十六进制位元写入十六进制字符串(HexString)

```asm
mov byte [HexStr+edx+2],al     ; 将 LSB 字符位元(char digit)位写入字符串行
mov byte [HexStr+edx+1],bl     ; 将 MSB 字符位元(char digit)位写入字符串行
```



## 9.4 标志、测试和分支

没有条件转移指令，很多汇编操作将无法完成。



### 9.4.1 无条件转移

通常情况下，指令是一条一条地从低内存到高内存顺序执行的。条件转移指令改变了即将执行的下一条指令的地址。转移指令可以在内存中移动执行的位置。它可以使执行路径折回去构成一个循环(它还能将程序绑定到诸多逻辑关系中)。

有两种类型的转移指令：条件转移指令和无条件转移指令。

无条件转移指令是指肯定会发生的跳转：

```
jmp <label>
```

当这条指令执行时，执行顺序转到了位于标号\<label\>处的那条指令。



### 9.4.2 条件转移指令

当执行时，调制转移指令需要检验一些东西，通常是一个，有时两个，或者很少情况下，3个 EFlags 寄存器中的标志位。入股被检验的标志位或碰巧处于某一特定的状态，执行将会跳转到代码段中其他位置的某个标号处；否则，它执行失败，继续按顺序执行下一条指令。

意思是，条件跳转指令的执行只有两种结果，要么成功，要么失败。是否执行跳转取决于 CPU 内部的一小撮二进制位序列的当前值。

当从整体上讨论 EFlags 寄存器时，当某条指令的执行结果为 0 时，会有一个标志位的值被某些特定指令设置为 1:零标志(ZF)。DEC(递减)就是很好的例子，DEC 把它的操作数减 1，如果通过递减使得操作数变为 0，ZF 就被设置为 1。其中一个跳转指令，JZ(为零跳转)，会检测 ZF 的值，如果发现 ZF 为 1，则发生跳转操作，执行转到 ZF 助记符后面的标号所指定的位置。它也许是整个 X86 指令集中国最常见的跳转指令。当执行某个循环的时候，我们经常使用该指令来判断存放在寄存器中的计数值是否为零。当计数器寄存器中的值通过 DEC 指令变为零时，这个循环结束，程序从循环之后的语句开始执行。

```
mov word [RunningSum],0      ; 清零 [RunningSum]
mov ecx,13                   ; 我们将执行此操作 13 次 
WorkLoop:
	add word [RunningSum],3    ; 将 [RunningSum] 与 3 相加
	dec ecx                    ; 循环计数器减 1
	jz SomeWhereElse           ; 如果计数器的值为零，任务完成
	jmp WorkLoop
	
```

循环体非常简单，只有一条 ADD 指令，但是，它可以长达几十条甚至几百条指令。ecx 指定了循环次数，上述代码中，循环体共执行 13 次。

这种建立循环的方法非常差劲，我们需要在每次循环中真正查找的是什么时候(即零标志)没有被设置，以及那条完成该设置的指令。



### 9.4.3 条件 “缺席” 时进行跳转

每一个条件跳转指令都有一个 “密友”：当指定条件的值没有被设置为 1 时跳转。

JZ指令，如果零标志位(ZF)被设置为1，则  JZ 指令跳转到代码段中的一个新的位置。JZ 的“密友”是 JNZ(不为零跳转)。当 ZF=0 时，JNZ 跳转到某个标号处，ZF=1时，则跳转失败。

作为例子，我们把之前那个小循环改进一下(通过使用 JNZ 来改变循环逻辑)

```
mov word [RunningSum],0      ; 清零 [RunningSum]
mov ecx,13                   ; 我们将执行此操作 13 次 
WorkLoop:
	add word [RunningSum],3    ; 将 [RunningSum] 与 3 相加
	dec ecx                    ; 循环计数器减 1
	jnz WorkLoop               ; 如果计数器的值为零，任务完成
```

一旦计数器减小到0，我们就认为循环完成了。JNZ 执行失败，而退出循环。要点是，如果能够立即定位程序在 JNZ 指令之后将执行的下一个任务，我们根本不需要使用 JMP 指令。指令很自然地流入下一个需要执行的任务。程序将具有一个更为自然，不太费解的自顶向下流程，也就更容易理解和阅读了。



### 9.4.4 标志

进位标志(CF)，零标志(ZF)，方向标志(DF)，符号标志(SF)以及溢出标志(OF)，将会是新手用到的 99.9% 的标志位。

如前所述，当 ZF=1时，JZ 跳转，而当 ZF=0时，JNZ 跳转。大多数对于某个操作数执行某种操作的指令(例如 AND，OR，XOR，INC，DEC 以及所有的算术指令)都会根据操作结果设置 ZF 的值。另一方面，那些仅仅执行数据移动的指令(例如 MOV，XCHG，PUSH以及POP)并不会影响 ZF 或者任何其他标志。很明显，POPF 指令可通过将栈顶值弹出到标志寄存器中来影响它们。

一个奇怪的例外是 NOT 指令，它对操作数执行一个逻辑操作时，不设置任何标志——即使它会导致操作数的值变为零。在开始编写依赖于标志位的程序之前，最好查阅一下指令指南，以确保这些指令严格地正确遵守这些标志的规矩。



### 9.4.5 通过 CMP 进行比较操作

标志位的一个主要应用是控制循环。另外一个主要应用是对两个数进行比较。

CMP 指令的功能是进行两个数的比较，执行完设置相应的标志：

```asm
cmp <op1>,<op2>      ; 设置 OF, SF, ZF, AF, PF 以及 CF
```

`Result = <op1> - <op2>`CMP 是一个减法操作，但是却丢弃减法的结果，只影响标志位。第二个操作数被从第一个操作数中减掉。根据相减的结果，相关的标志位被设置成适当的值。

在 CMP 指令之后，可以根据若干个算术条件进行跳转。算术条件一般包括：等于，不等于，大于，小于，大于小于，小于等于。



### 9.4.6 转移指令的错综复杂之处

有一组令人费解的转移指令助记符，它们处理的数学关系一共分为 6 类：等于，不等于，大于，小于，大于小于，小于等于。由于每一条机器指令都有两个助记符，这使得情况有些复杂。例如 JLE(如果小于等于则跳转)和JNG(如果不大于则跳转)。这两个助记符是同义词，它们都产生相同的二进制操作码，具体选哪个，根据自己的习惯选择。

另一个复杂之处是针对有符号算术比较和无符号算术比较都有单独的指令系列。有符号数的最高位被认为是一个内置的，指示该值是否为负数的标志。如果该值为 1，那么这个数被认为是负数。如果该位的值为 0，那么这个数被认为是正数。

为了对有符号数算术理解得更深入一些，你需要知道的所有内容为：在有符号算术中，负数是合法的，而且一个值的最重要的位(即最高位)被当成符号位。(如果为 1，则认为该数为一个负数)。

另一方面，无符号算术运算并不识别负数，最高有效位只不过是哪个量所代表的二进制数中的一个普通位而已。



### 9.4.7 “大于” 与 “以上”

为了区分有符号转移指令和无符号转移指令，助记符使用两个不同的表达式来表示两个值之间的关系:

* 有符号数被视为大于或者小于。例如，为了测试一个有符号操作数是否大于另一个有符号操作数，需要在 CMP 指令后面使用 JG (如果大于则跳转)助记符。
* 无符号数被视为以上或者以下。例如，为了判断一个无符号数是否大于另一个(above)另外一个，需要在 CMP 指令后面使用 JA (如果以上则跳转)助记符。

下表总结了算术转移助记符以及对应的同义词。所有包含**以上或者以下的助记符都适用于无符号数**，而所有包含**大于或者小于的助记符则适用于有符号数**。

表9-6 转移指令助记符及其同义词

| 助记符 |                        | 同义词 |                            |
| ------ | ---------------------- | ------ | -------------------------- |
| JA     | 如果以上则跳转         | JNBE   | 如果不以下或者等于，则跳转 |
| JAE    | 如果以上或者等于则跳转 | JNB    | 如果不以下则跳转           |
| JB     | 如果以下则跳转         | JNAE   | 如果不以上或者等于，则跳转 |
| JBE    | 如果以下或者等于则跳转 | JNA    | 如果不以上则跳转           |
| JE     | 如果相等则跳转         | JZ     | 如果结果为零则跳转         |
| JNE    | 如果不相等则跳转       | JNZ    | 如果结果不为零则跳转       |
| JG     | 如果大于则跳转         | JNLE   | 如果不小于等于则跳转       |
| JGE    | 如果大于等于则跳转     | JNL    | 如果不小于则跳转           |
| JL     | 如果小于则跳转         | JNGE   | 如果不大于等于，则跳转     |
| JLE    | 如果小于等于则跳转     | JNG    | 如果不大于则跳转           |



表 9-7 根据逻辑条件和它们在有符号数和无符号数中的使用方法，将助记符进行了分类，还列出了每一条转移指令测试的标志位。注意，为了执行跳转操作，某些转移指令可能需要测试两个可能的标志之一，而有些则需要测试两个标志位。

表 9-7 CMP 指令执行后的有用算术测试

| 条件         | 操作符 | 无符号值 | 跳转条件       | 有符号数 | 跳转条件         |
| ------------ | ------ | -------- | -------------- | -------- | ---------------- |
| 等于         | =      | JE       | ZF=1           | JE       | ZF=1             |
| 不等于       | <>     | JNE      | ZF=0           | JNE      | ZF=0             |
| 大于         | >      | JA       | CF=0 并且 ZF=0 | JG       | ZF=0 或者 SF=OF  |
| 小于         | <      | JB       | CF=1           | JL       | SF<>OF           |
| 大于等于     | >=     | JAE      | CF=0           | JGE      | SF=OF            |
| 不小于       |        | JNB      | CF=0           | JNL      | SF=OF            |
| 小于或者等于 | <=     | JBE      | CF=1 或者 ZF=1 | JLE      | ZF=1 或者 SF<>OF |
| 不大于       |        | JNA      | CF=1 或者 ZF=1 | JNG      | ZF=1 或者 SF<>OF |

至于理解这些指令具体如何检验标志，可以等到我们已经具备了一些编程经验之后来完成。



### 9.4.8 使用 TEST 指令查找位 1

X86 指令系列意识到，汇编语言经常用到位检测操作，于是它提供了与 CMP 指令具有相同功能的指令：TEST。TEST 对两个操作数执行与逻辑操作，然后根据执行结果设置相应的标志位，但是不修改目标操作数。

```
test <操作数>,<位掩码>
```

例如，如果想判定 AX 的第 3 位是否为 1，可以使用如下指令:

```
test ax,08H    ; 用二进制表示第 3 位的值为 00001000B ,或 08H
```

操作完成后，目标操作数 AX 中的值并没有改变，但是二进制模式 00001000 和 AX 却的的确确按照逻辑与真值表的规则执行了本操作。如果 AX 的第 3 位值为 1，则零标志被设置成 0，如果 AX 的第 3 位值为1，则零标志被设置为1。为什么呢，如果把(位掩码中的)1 和 (AX 中的) 0 相与，将得到 0。如果所有的 8 个按位与操作结果都为 0，结果就是 0，零标志就会变为1，用以值示结果为零。

只能查找值为 1 的二进制位，如果需要查找值为 0 的二进制位，必须先通过非指令把每一位转换成相反的状态，然后就可以通过测试某个位是否为 1 来判断它是否为零。

**最后，TEST 不能一次可靠地测试两个或多个二进制位的值是否为 1。TEST 不检查位模式是否存在；它只检查一个单独的二进制位是否存在。**



### 9.4.9 使用 BT 指令查找位0

在 386 及较新的处理器中都有另外一条指令，它既能测试位 0，也能测试位 1。BT(位测试)执行的任务非常简单：它将指定的位从第一个操作数中拷贝到进位标志(CF) 中。

```
bt <value containing bit>, <bit number>
```

一旦执行了 BT 指令之后，我们应该立即检验 CF 中的值，根据它来进行分支运算。

```
bt eax,4   ; 检验 AX 中的第 4 位
jnc quit   ; 如果第 4 位=0，任务完成
```

上面所显示的字面常数所处理的编号(编号从 0 开始)，而非该二进制位的数值。

BT 指令的运算过程相当慢，在循环次数很大的循环内部，不宜使用该指令。快老掉牙的 TEST 指令则要快很多，但是 TEST只能检测二进制 1。



## 9.5 保护模式下内存寻址详解

386 CPU 下的保护模式引入了一个通用内存寻址模式，在该架构中，所有的通用寄存器都可以平等地参与寻址操作。如下图所示，该图也许是整本书中唯一一个最重要的图解了。内存寻址是汇编语言最关键的工作，如果对它不理解，其他工作根本无从谈起。

* 基址寄存器和索引寄存器可以是任意的 32 位通用寄存器，包括 ESP。
* 偏移地址可以是任意的 32 位常数。

<img src="/Users/wangjun/Library/Application Support/typora-user-images/截屏2021-06-21 下午8.58.53.png" alt="截屏2021-06-21 下午8.58.53" style="zoom:67%;" />



* 缩放比例(scale) 必须是 1，2，4，8之中的一个。
* 在执行加法之前，索引寄存器与缩放比例(scale)相乘。
* 所有的元素都是可选的，而且几乎可以采用任意组合。
* 16 位 和 8 位寄存器可能不被用于内存寻址。

表 9-8 保护模式下的内存寻址方式

| 方式                                  | 举例                | 描述                                     |
| ------------------------------------- | ------------------- | ---------------------------------------- |
| [base]                                | [edx]               | 只有基址                                 |
| [displacement]                        | [0F3H]              | 位移量，或者是字面常数，或者是有符号地址 |
| [base+displacement]                   | [ecx + 033H]        | 基址 + 位移量                            |
| [base +index ]                        | [eax + ecx]         | 基址 + 索引                              |
| [index * scale]                       | [ebx * 4]           | Index * 缩放比例                         |
| [index * scale + displacement]        | [ebx * 8 + 65]      | 索引 * 缩放比例 + 位移量                 |
| [base + index * scall]                | [esp + edi * 2]     | 基址 + 索引 * 缩放比例                   |
| [base + index * scall + displacement] | [esp + ebp * 4 + 9] | 基址 + 索引 * 缩放比例 + 位移量          |



### 9.5.1 有效地址计算

上表中，除了前两行之外，其他均涉及一些对括号里的两个或多个表示地址的术语的数学计算。这种数学计算叫做有效地址计算，计算的结果叫做有效地址。其中术语"有效地址"指的是最终被用来读取或者写入的内存地址，不管它以何种方式表示。当指令被执行时，有效地址计算就由该指令来完成。

在基址寻址方式中，有效地址是简单的 32 位值，存放在括号里的通用寄存器中。不涉及任何计算，在源代码中看不到任何文字地址或者符号地址。所以，尽管该指令采用括号之间的寄存器名进行编码，但是当代码执行时，即将发给内存系统的是存放在该寄存器内部的地址。

唯一一种有效地址即为指令助记符显示内容的情况就是括号里的字面地址。这种情况几乎不会发生，因为在汇编时，精确地知道一个 32 位数字地址这种情况极不可能发生。

大多数情况会涉及一些算术运算，例如，在基址+索引这种寻址方式中，点那个指令被执行时，括号里的两个通用寄存器的值被相加以产生有效地址。



### 9.5.2 位移量

在合法地址的若干组成部分中，位移量这个术语实际上最难理解。位移量可以是一个字面地址，当位移量独立出来时，它实际上通常以符号地址的形式出现。例如:

```
mov eax,[HexStr]
```

这里，放入 EAX 中的就是当程序被加载到内存里时赋给变量 HexStr 的地址。像所有地址一样，它就是一个数字，但是是在运行时而不是汇编时确定的，就像字面常量一样。

当 NASM 在一个内存引用中看到两个(或多个)常数值时，它会在编译时将其组合成一个位移量。这里是实现过程：

```
mov eax,[HexStr + 3]
```

位移量的关键特性是它并不位于寄存器中。



### 9.5.3 基址+位移量寻址方式

一个很好的例子是：

```asm
mov byte [HexStr+edx+2],al 
```

这是一个非常好的例子，里面包含两个位移量，NASM 会将其合并成一个。名为 HexStr 的变量决定了一个数字(HexStr 的 32 位地址)，它很容易与字面常量 2 相加，所以，实际上只有一个基址(EDX)和一个位移量。



### 9.5.4 基址+索引寻址方式

也许最常使用的一种简单寻址方式就是：基址+索引寻址，通常将括号里的两个通用寄存器的值相加来计算有效地址，例如：

```asm
sub byte [ebx+ecx],20H
```

缓冲区的地址已经提前放入 EBP 中，ECX 中的数据是任意给定循环中相对于被处理的字符缓冲区的起始位置的位移。把缓冲区地址与位移量相加，将产生 SUB 指令处理的字符的有效地址。

想想为什么不用基址+位移量寻址方式呢？下面的指令也合法呀:

```
sub byte [Buff + ecx],20H
```

在之前的程序中，在开始循环之前，我们必须把缓冲区的地址减 1。但是且慢，我们能不能让 NASM 稍作调整，通过与另外一个位移量-1相加来实现呢？实际上可以，它同样会起作用。uppercaser2 程序的核心循环部分如下所示:

```asm
    mov ecx,esi             ; 将读入的字节数放入 ecx 寄存器中
    mov ebp,Buff            ; 将缓冲区的地址放入 ebp 寄存器中
;    dec ebp                 ; 调整偏移地址的计数值
    
; 详细检查缓冲区，并将小写字符转换为大写字符
Scan:
    cmp byte [Buff-1+ecx],61H  ; 测试输入字符，将其与小写字符 'a' 相比较
    jb Next                 ; 如果 ASCII 码值比 'a' 的 ASCII 码值小，则不是小写字符
    
    cmp byte [Buff-1+ecx],7AH  ; 测试输入字符，将其与小写字符 'z' 相比较
    ja Next                 ; 如果 ASCII 码值比 'z' 的 ASCII 码值大，则不是小写字符

    ; 此时我们拥有了一个小写字符
    sub byte [Buff-1+ecx],20H  ; 与 20H 相减，得到大写字符

Next:
    dec ecx                 ; 递减字符计数器
    jnz Scan                ; 如果仍然有字符，则继续循环
```



当程序被加载时，NASM 完成数学运算，有效地址表达式内的缓冲区地址被递减 1。这实际上是对一种对这一特定循环的正确编码方式。

在大多数情况下，位移量包含一个地址，而基址是一个包含了某一数据项相对于那个地址的偏移量地址的寄存器。



### 9.5.5 索引*缩放比例+位移量寻址方式

如果需要逐字节地扫描内存中的缓冲区，一般情况下需要使用基址+索引寻址方式，但是如果需要访问一个位于缓冲区中或者表中的数据项，而该数据项不是一个单字节，而是一个字，或者双字，该怎么办？这就需要更强大的内存寻址机制。

在本书中，数组这个词是我强调缓冲区或表时经常使用的术语，有些其他作者把表叫做数组，尤其是当讨论的上下文是高级语言时，但是所有以下 3 个条款都对同一定义适用: 内存中的一个连续数据项，数据项的大小相同，数据项的内部定义相同。

例如，下列是仅仅包含大小为一个字节的数值的表：

Digits: db "0123456789ABCDEF"

这是内存中某一行里的 16 个单字节字符，可以采用基址+位移量寻址的方式通过如下方式访问 Digits 表中的 "C" 字符: 

```asm
mov ecx,12
mov edx,[Digits+ecx]
```

如果表里包含 32 位的值呢？这样的表很容易定义：

```ams
Sums: dd "15,12,6,0,21,14,4,0,0,19"
```

修饰符 DD 告诉 NASM ，在表 Sums 中，每一个数据项都是 32 位双字。字面常量向表中每一个元素插入了一个数字。Sums 中的第一个元素(这里是 15)的地址就是整个表的地址，它包含在变量 Sums 中。

那么，第二个元素 12 的地址是多少呢？表中的第二个数据项相对于该表起始位置的 4 字节偏移处，不能通过简单地加 1 来索引第二项数据元素。

“缩放比例“这个概念就闪亮登场了。地址可能会包含缩放比例这一术语，它是一个乘数，可以是2，4，8中的任意一个字面常量。索引和缩放比例相乘的结果再与位移量相加，产生有效地址。这就是索引 * 缩放比例 + 位移量寻址方式。

一般情况下，缩放比例这个术语是表中某一单个元素的大小。如果表包含 2 个字节数值，那么缩放比例就是 2。如果表中包含 4 个字节双字数值，那么缩放比例就是 4.如果表中包含 6 字节 4 字数值，那么缩放比例就是8。

例如，下图的寻址方式为：[DDTable + ECX*4]。DDTable 是一个双字(32 位)表，DDTable 的地址是位移量。ECX 寄存器是索引值，在本例中，它的值为 2，代表你想访问的表元素的编号。因为它是一个 4 字节双字表，所以缩放比例为 4。

<img src="/Users/wangjun/Library/Application Support/typora-user-images/截屏2021-06-21 下午11.52.26.png" alt="截屏2021-06-21 下午11.52.26" style="zoom: 50%;" />

因为每个表元素的长度都为 4，所以第二个元素相对于表的起始位置的偏移地址为 8。该元素的有效地址通过首先将索引和缩放比例相乘，然后将结果与 DDTable 的地址相加计算而来。



### 9.5.6 其他寻址方式

任何包含缩放比例的寻址方式都是按照这种方式都是按照这种方式工作的。不同之处在于采用什么其他术语来计算有效地址。基址+索引*缩放比例这种寻址方式将一个缩放后的索引与寄存器中的基址值相加，而不是与一个位移量相加：

```asm
mov ecx,2            	 ; 索引存放在 ecx 里
mov ebp,DDTable        ; 表地址存放在 ebp 里
mov edx,[ebp+ecx*4]
```

你一般不会经常处理向 DDTable 这样的预定义变量地址。有时，表的地址来自其他地方，更多情况是一张内存里的包含很多子表的二维表，每张表里包含一些元素。这样的表可通过两步来访问：第一步，推导出内部表在外部表中的地址：第二步，推导出所需元素在内部表中的地址。

DOS 下的25行 * 80字符的文本显存缓冲区就是一张二维表。25行中的每一行都是由 80 个字符组成的表，每一个字符都是由 2 个字节构成的字。(一个字节是 ASCII，另一个字节则指出诸如颜色，下划线之类的属性)因此，这个缓冲区从整体上来看就是一个由 25 张更小的表构成的总表，每一张小表包含 80 个两字节数值。

那种类型的视频访问系统早就随着 DOS 一起消亡了；Linux 不允许直接访问 PC 显存。

通过按比例缩放，我们可以非常容易地处理包含 2 字节，4 字节，8 字节元素的表。但是如果你的表里包含的是 3 字节元素呢？或者 5 字节元素呢？或者 17 字节元素呢？在这种情况下，为了瞄准某一特定的元素，不得不做一些额外的计算。有效地址本身不能完成所有的任务。

在程序 hexdump1.asm 中，每个元素的长度为 3 个字符，所以缩放操作不能在指令内部执行，必须单独处理。

这并不困难。缩放 hexdump1 程序中的 HexStr 表中的 3 字节元素可以通过如下指令完成：

```asm
mov edx,ecx    ;将字符计数器拷贝到 edx
shl edx,1      ; 通过左移位来实现将计数器*2
add edx,ecx    ; 完成与 3 相乘
```

缩放 5 倍可以通过将索引值左移 2 位，进而实现与 4 相乘，之后再与索引值的另一份拷贝相加，进而完成与 5 相加。

概括地讲，为了将一个索引值缩放 X 倍：

1. 找出比 X 小的那个最大的 2 的幂数
2. 将索引值左移那个 2 的幂数位
3. 不只一次地将原始索引值的一份拷贝与移位后的那个拷贝相加，直到完成与 X 相乘。

例如，如果 X 为11，则缩放计算可以通过如下所示代码完成：

```
mov edx,ecx        ; 将索引拷贝到 edx 中
shl edx,3          ; 通过左移 3 位实现与 8 相乘
add edx,ecx        ; 执行三次与索引拷贝值相加的第一次加法
add edx,ecx        ; 执行三次与索引拷贝值相加的第二次加法
add edx,ecx        ; 执行三次与索引拷贝值相加的第三次加法
```

这种方法对于缩放比例相对较小的情况非常有效；一旦超过 20，将会用到很多条加法指令。从这一点来讲，解决方案不是为了计算缩放比例，而是为了查找专门为某一给定缩放比例而定义的比例值。例如，假设表中每个元素长度都为 25 个字节。你可以定义一张 25 的倍数的表:

ScaleValues: dd 0,25,50,75,100,125,150,175,200,225,250,275,300

对于每一项大小为 25 个字节的表而言，为了得到索引值为 6 的表项的地址，我们可以通过如下方式在表中查找6 * 25的结果。

```
mov ecx,6
mov eax,[ScaleValues + ecx*4]
```

现在，EAX 中包含了第 6 个元素的第一个字节的有效地址。



### 9.5.7 LEA：最机密的数学机器

在 X86 体系结构中，有一条最古老但是从某个方面来讲又最神秘的指令：LEA，加载有效内存。从表面上看，它所做的事情非常简单：根据括号里给出的源操作数来计算有效地址，然后把该地址加载到它的目标操作数所指定的任意的 32 位通用寄存器中。

看看上面一段代码，如果想把索引值为 6 的那个数据项的有效地址放入寄存器中该怎么操作？

```asm
lea ebx,[ScaleValues + ecx*4]
```

这里发生的事情：CPU 根据方括号中给定的内容计算有效地址，然后将那个地址加载到 EBX 寄存器中。



LEA 还有一个特殊的作用：进行无需移位，相加或者迟钝的 MUL 操作的快速数学运算。例如，以下代码实现与 3 相乘运算：

```ams
mov edx,ecx     ; 把字符计数器拷贝到 edx 中
shl edx,1       ; 通过左移位实现将指针与 2 相乘
add edx,ecx     ; 完成与 3 相乘
```

使用 LEA 指令可以实现相同的功能:

```asm
mov edx,ecx     ; 把字符计数器拷贝到 edx 中
lea edx,[edx*2 + edx]   ； 将edx 乘以 3
```

EDX 中的值也许实际上并不是某些东西的合法地址，但是这一事实并不重要。**LEA 并不设法引用它计算出来的地址。它只是根据括号里的内容完成数学运算，然后将结果存入目标操作数。目标完成，不触及内存，也不影响标志位。**

当然，你被限制在那些能够对有效地址进行的数学运算里，但是稍稍超过这个范围一点点，那就是当放入一个常数的时候，你也可以实现将任意的通用寄存器与2，3，4，5，8，9相乘！**它不是任意的数学运算，但是在汇编中，经常会遇到有与2，3，4，5，6，8和9相乘的情况**，你可以把 LEA 和 移位指令以及加法指令组合在一起，完成更为复杂的数学运算。两个连续的 LEA 指令可以实现把一个值与 10 相乘，实际上这一点很有用：

```asm
lea ebx,[ebx*2]          ; 把 ebx 与 2 相乘
lea ebx,[ebx*4+ebx]      ; 把 ebx 与 5 相乘，以求取与 10 相乘的最终结果
```

**LEA 指令在一个机器周期里完成它的工作，X86 数学运算中没有比它更快的了！**



### 9.5.8 16 位寄存器的负担

在保护模式下，对 32 位寄存器进行分级管理，这存在着一定的负面效果：使用 16 位通用寄存器 AX，BX，CX，DX，SP，BP，SI和DI将会使运算速度减慢。由于 32 位寄存器规则，使用 16 位寄存器被认为是一种特例，它会增加汇编语言产生的操作码的尺寸，减慢程序代码的向下执行速度。例如：AX 寄存器仍然位于 CPU 的硅芯片内部(作为更大的 EAX 寄存器的一部分)，简单地把数据放入其中并不会使速度减慢。但是，只要将 AX 作为某个操作码的操作数，以这种方式放入 AX 中，执行速度肯定会减慢。以下的语法将产生一个执行速度比较慢的操作码:

```
mov ax,542
```

 我们可以采用如下的操作码完成同样的事情，而且 NASM  产生的操作码执行速度会更快:

```asm
mov eax,542
```

在代码中三三两两地使用 16 位寄存器并不会使这个程序变慢，我们需要避免的是在一个将会被执行几千次甚至成千上万次的紧密循环中使用 16 位寄存器。

但某些特殊情况下，不得不使用使用 16 位寄存器，例如：

```asm
mov byte [ebx],al
```

在现代的 CPU 中，单独的操作码的代码性能已经淹没在 CPU 的一些机制(如高速缓存，超线程，预取指令技术等)的性能之中。

只要简单记住：**凡事能使用 32 位寄存器的地方就使用 32 位寄存器。**



## 9.6 字符表转换

有一种类型的查表操作，它(或者曾经)非常普遍以至于 Intel 的工程师专门为它烤制一条单独的指令到 X86 体系结构中。这种普遍的表查找操作就是我们在第 8 章结尾的潜台词：字符转换。在 20 世纪 80 年代早期，我需要以各种方式转换字符序列，其中最简单的一种是把所有的字母从小写转换为大写。

仅仅把小写字母转换为大写字母很简单，因为它们的 ASCII 码值相差 20H(32)，通过简单的将小写字母减去 20H 来转换为大写字母。这样做是可靠的，但是在某种意义上来说是一种特例。如果需要把所有的 “竖线”(ASCII 124)字符转换为感叹号，该怎么做呢？(我必须这样做，因为有一种类型的傻瓜主机根本不“接纳”竖线)。可以为每一种必须处理的情况单独编写特定的代码，或者，也可以使用转换表。



### 9.6.1 转换表

转换表是一种特殊类型的表，它按照如下方式工作：建立一张数值表，并为每一个必须被转换的可能值创建一个表项。采用数字(或被当成数字的字符)作为该值在这张表中的索引。索引指定的表中位置是一个用于替换被用作索引的原值的数字。**简言之，原值被当作该值在查找表中的索引，然后根据索引在表中找到一个新的值在替换原来的值，这样就实现了将原来的值转换为一个新值。**

一个字节包含足够的位来表示 256 个不同的值，所以我们如果想要转换字节大小的值，需要一张具有 256 个条目的表。从技术上讲，ASCII 字符序列只使用前 128 个字符，”高“ 128 位通常被分配给特殊字符，如非英语字母，#字符，数学符号等。**字符转换的一个最常见的用途就是把值大于 128 的字符转换成某些小于 128 的字符，以避免在那些不能处理扩展 ASCII 值的老式系统中发生混乱。**

```asm
UpCase:
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,20h,20h,20h,20h,20h,20h,20h
db 20h,21h,22h,23h,24h,25h,26h,27h,28h,29h,2Ah,2Bh,2Ch,2Dh,2Eh,2Fh
db 30h,31h,32h,33h,34h,35h,36h,37h,38h,39h,3Ah,3Bh,3Ch,3Dh,3Eh,3Fh
db 40h,41h,42h,43h,44h,45h,46h,47h,48h,49h,4Ah,4Bh,4Ch,4Dh,4Eh,4Fh
db 50h,51h,52h,53h,54h,55h,56h,57h,58h,59h,5Ah,5Bh,5Ch,5Dh,5Eh,5Fh
db 60h,41h,42h,43h,44h,45h,46h,47h,48h,49h,4Ah,4Bh,4Ch,4Dh,4Eh,4Fh
db 50h,51h,52h,53h,54h,55h,56h,57h,58h,59h,5Ah,7Bh,7Ch,7Dh,7Eh,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h
```

表 UpCase 被定义成 16 ，每一行由 16 个单独的十六进制值组成。表被分成 16 行仅仅是为了屏幕上或者打印页上的可读性，并不影响 NASM 在输出中产生的二进制表。一旦以二进制表形式表示，它是位于一行中的 256 个 8位值。

任何转换表都可被看作表达了一种或多种管理转换过程中发生的各种事情的“规则”。上面的UpCase 表表达了以下转换规则：

* 所有的小写 ASCII 字符被转换成大写。
* 所有小于 127 的非小写字母可打印 ASCII 字符被转换成它们自己。(严格来将，它们并没有被丢下不管，而是转换成了同样的字符)
* 所有 ASCII 码值位于 127～255 之间的 “高位”字符都被转换成 ASCII 空格字符(32 或者 20h)。
* 除了9和10之外，所有的不可打印 ASCII 字符(总的来说，值在 0~31之间，还有 127) 被翻译成空格。
* 字符值 9 和 10(tab 和 EOL) 被转换成它们本身。



### 9.6.2 用 MOV 或者 XLAT 进行转换

那么如何使用这张 UpCase 表呢？很简单：

1. 将即将被转换的字符加载到 AL 中
2. 通过使用 AL 作为基址，UpCase 作为位移量，创建一个内存引用，然后通过 MOV 指令将该内存引用处的字节存储到 AL 中，替换掉那个作为基址使用的原值。

MOV 指令如下：

```
mov al,byte [UpCase+al]
```

但是有一个问题：**NASM 不会允许这么做。AL 寄存器不能参与有效地址运算操作，所有的其他 8 位寄存器也不能参与，接下来进一步研究 XLAT 指令。**

XLAT 指令是被硬编码的，用于以特定的方式使用特定的寄存器。它的两个操作数是隐式的：

* 转换表的地址必须在 EBX 中
* 被转换的字符必须在 AL 中。
* 转换后的字符会被返回 AL，替代 AL 中的原始字符。

通过以上方式设置好寄存器后，XLAT 指令就可以独自使用了：

```
xlat
```

**XLAT被限制在 8 位量内**

**这里我诚实地交代，XLAT 再也不能像以前那样处于绝对获胜的地位了。在 32 位保护模式下，同样的事情也可以采用如下指令完成:**

```
mov al,[UpCase+eax]
```

这里有一个陷阱：你必须清除 EAX 高 24 位的所有剩余值，否则你很可能意外地访问远远超过转换表的边界的索引。因此，在加载即将被转换的值到 AL 中之前，一定要通过一条简单的 XOR EAX,EAX 指令将 EAX 清零。

事实上，在给定了使用使用 AL 和 EBX 的要求下，XLAT 指令只是一副淡水彩画，但是，我一直试图在这里介绍的，是一个通过表来实现字符转换的更大主题。

下列程序和程序 uppercase2 的功能完全相同：它强制把一个输入文件的所有小写字符转换为大写，然后再将其写入一个输出文件。我没有将其叫做 "uppercase3"，因为它是一个通用的字符转换程序。在这个特定程序里，它把所有的小写字符转换成大写，但是这只是 UpCase 表所表示的规则之一。修改这张表即可修改转换规则。你可以把任意一个值转换成 256 个值中的任意一个，甚至可以批量转换。

```asm
; 可执行程序名 XLAT1
; 版本：1.0
; 创建日期：22/6/2021
; 最后修改日期：22/6/2021
; 作者: wangjun
; 描述：用NASM 2.13.02 实现的一个运行在 Linux 下的简单汇编程序
; 示范了如何使用 XLAT 指令来修改文本流
; 通过以下方式执行本程序:
; xlat1 < (input file)
;
; 通过以下命令生成本程序
; nasm -f elf -g -F DWARF xlat1.asm -o xlat1.o
; ld -m elf_i386 -o xlat1  xlat1.o
;

SECTION .data                   ; 包含已初始化数据的段
    StatMsg: db "Processing...",10
    StatLen: equ $-StatMsg
    DoneMsg: db "...done!",10
    DoneLen: equ $-DoneMsg


; 下面的转换表把所有的小写字母转换为大写。
; 它还把所有的不可打印字符转换为空格。
; 住了 LF 和 HT 之外

UpCase:
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,20h,20h,20h,20h,20h,20h,20h
db 20h,21h,22h,23h,24h,25h,26h,27h,28h,29h,2Ah,2Bh,2Ch,2Dh,2Eh,2Fh
db 30h,31h,32h,33h,34h,35h,36h,37h,38h,39h,3Ah,3Bh,3Ch,3Dh,3Eh,3Fh
db 40h,41h,42h,43h,44h,45h,46h,47h,48h,49h,4Ah,4Bh,4Ch,4Dh,4Eh,4Fh
db 50h,51h,52h,53h,54h,55h,56h,57h,58h,59h,5Ah,5Bh,5Ch,5Dh,5Eh,5Fh
db 60h,41h,42h,43h,44h,45h,46h,47h,48h,49h,4Ah,4Bh,4Ch,4Dh,4Eh,4Fh
db 50h,51h,52h,53h,54h,55h,56h,57h,58h,59h,5Ah,7Bh,7Ch,7Dh,7Eh,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h

; 下面的转换表 “致力于”将所有的可打印字符转换成它们本身
; 除了 LF 和 HT 之外，将所有的不可打印字符转换成空格
; 你可以修改它，使之能够把你想转换的任意字符转换成任意你想要的结果

Custom:
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,20h,20h,20h,20h,20h,20h,20h
db 20h,21h,22h,23h,24h,25h,26h,27h,28h,29h,2Ah,2Bh,2Ch,2Dh,2Eh,2Fh
db 30h,31h,32h,33h,34h,35h,36h,37h,38h,39h,3Ah,3Bh,3Ch,3Dh,3Eh,3Fh
db 40h,41h,42h,43h,44h,45h,46h,47h,48h,49h,4Ah,4Bh,4Ch,4Dh,4Eh,4Fh
db 50h,51h,52h,53h,54h,55h,56h,57h,58h,59h,5Ah,5Bh,5Ch,5Dh,5Eh,5Fh
db 60h,61h,62h,63h,64h,65h,66h,67h,68h,69h,6Ah,6Bh,6Ch,6Dh,6Eh,6Fh
db 70h,71h,72h,73h,74h,75h,76h,77h,78h,79h,7Ah,7Bh,7Ch,7Dh,7Eh,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h
db 20h,20h,20h,20h,20h,20h,20h,20h,20h,09h,0Ah,20h,20h,20h,20h,20h

SECTION .bss                    ; 包含未初始化数据的段
    READLEN equ 1024            ; 缓冲区的长度
    ReadBuffer: resb READLEN    ; 文本缓冲区本身

SECTION .text                   ; 包含代码的段

global _start                   ; 连接程序需要利用它找到入口点

_start:
    nop

; 通过标准错误 stderr 显示错误信息：“我正在工作....”
    mov eax,4                   ; 指定 sys_write 调用
    mov ebx,2                   ; 指定文件描述符2：标准错误
    mov ecx,StatMsg             ; 传递该信息的偏移地址
    mov edx,StatLen             ; 传递该信息的长度
    int 80H                     ; 进行内核调用

;从标准输入读入满满一缓冲区文本
Read:
    mov eax,3                   ; 指定 sys_read 调用
    mov ebx,0                   ; 指定文件描述符0：标准输入
    mov ecx,ReadBuffer          ; 传递需要读取的缓冲区的偏移地址
    mov edx,READLEN             ; 传递一次运行需要读入的字节数
    int 80H                     ; 进行内核调用
    mov ebp,eax                 ; 复制 sys_read 的返回值，并妥善保管
    cmp eax,0                   ; 如果 eax=0，则 sys_read 到达了文件结尾
    je Done                     ; 如果相等则跳转(通过与0比较)

; 为下面的转换步骤设置寄存器
    mov ebx,UpCase              ; 将表的偏移地址放入 ebx 中
    mov edx,ReadBuffer          ; 将缓冲区的偏移地址存入 edx 
    mov ecx,ebp                 ; 将缓冲区中的字节数存入 ecx
    dec edx                     ; 调整缓冲区指针
    
; 使用 xlat 指令转换缓冲区中的数据：
; (注意：添加注释的指令跟 XLAT 做同样的事情)
; 去掉注释，然后把 XLAT 注释掉，试试看：

Translate:
    ; xor eax,eax               ; 清除 eax 的高 24 位
    mov al,byte [edx+ecx]       ; 加载字符到 AL 中以备转换
    ; mov al, byte [UpCase+eax] ; 通过表来转换 AL 中的字符
    xlat
    mov byte [edx+ecx],al
    dec ecx                     ; 把字符计数器减1
    jnz Translate               ; 如果缓冲区里还有字符，重复执行
    
; 把装满缓冲区的文本的缓冲区写入标准输出：
Write:
    mov eax,4                   ; 指定 sys_write 调用
    mov ebx,1                   ; 传递文件描述符1：标准输出
    mov ecx,ReadBuffer          ; 传递缓冲区的偏移地址
    mov edx,ebp                 ; 传递字节数到缓冲区中
    int 80H                     ; 进行内核调用
    jmp Read                    ; 回去继续循环，加载另一个装满数据的缓冲区

; 通过标准错误显示信息“我做完了”:
Done:
    mov eax,4                   ; 指定 sys_write 调用
    mov ebx,2                   ; 指定文件描述符2：标准错误
    mov ecx,DoneMsg             ; 传递该信息的偏移地址
    mov edx,DoneLen             ; 传递该信息的长度
    int 80H                     ; 进行内核调用

; 全部完成
    mov eax,1                   ; 退出程序
    mov ebx,0                   ; 将 0 作为返回值
    int 80H                     ; 进行内核调用
```



custom 表代表了如下规则：

* 所有小于 127 的可打印 ASCII 字符被转换成它们自己。(严格来讲，它们并没有被丢下不管，而是转换成了同样的字符。)
* 所有 ASCII 码从 127～255 的“高位”字符都被转换成 ASCII 空字符(32 或 20H)
* 所有不可打印 ASCII 字符(总的来说，值在 0～31 之间，还有 127)被翻译成空格，除了 9 和 10 之外。
* 字符值9和10(tab 和 EOL)被转换成它们本身。



## 9.7 用表来代替计算

计算机的标准化使得字符转换不再像以前那样普遍，但是转换表在某些其他领域可以相当的有用。其中之一就是执行快速数学运算。看看以下的表：

Squares: db 0,1,4,9,16,25,36,49,64,81,100,121,144,169,196,225

Squares 是一张 0～15之间的数字的平方表。如果在某个计算中需要用到 14 的平方，可以使用 MUL 指令，但是它的运算速度非常慢，而且需要两个通用寄存器；或者你也可以简单地从 Squares 表中取出结果

```
mov ecx,14
mov al,byte[Squares+ecx]
```

现在 ecx 包含了 14 的平方。可以用 XLAT 完成同样的功能，虽然它要求使用特定的寄存器。**还要记住，XLAT 被限制在 8 位量内。**上面显示的 Squares 表是 XLAT 所能使用的最大的平方表，因为下一个平方值(16)是256，它不能用 8 位表示。

建立一张每个条目都是 16 位的平方值的查找表能够让你包含0～255之间的所有整数的平方。如果查找表的每一个条目都是 32 位，你就能包含0～65535 之间的所有整数的平方——但是那将是一张规模巨大的表。

使用表来查找一些诸如平方根之类的值曾经使用得非常频繁。近几年来，在 CPU 中直接包含一些诸如数学运算的处理器使得这类技术不再像以前那样具有竞争力了。但是，当面对一个整数运算的挑战时，你应该时刻在脑中想着使用查找表的可能性。
